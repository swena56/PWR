ENV["PROJECT_NAME"] = "SampleProject1"
ENV["IP_ADDRESS"] = "192.168.1.244"

## Prepare Windows System
# @"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin; refreshenv; choco install -y vagrant virtualbox putty Xming openssh; refreshenv; vagrant plugin install vagrant-triggers vagrant-vbguest; pause"

## Start Server
# vagrant up

## TODO - configure SSH security
# vagrant ssh-config

################### VagrantFile #######################
Vagrant.configure("2") do |config|

  config.vm.box = "ubuntu/trusty64"
  
  config.vm.synced_folder "PWR", "/home/vagrant/PWR"

  config.vm.network "forwarded_port", guest: 80, host: 8081
  config.ssh.insert_key = false

  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = false
    config.vbguest.no_install = true
  end

  config.ssh.forward_agent = true
  config.ssh.forward_x11 = true
  config.ssh.keep_alive = true

  config.vm.provider :virtualbox do |vb|
    vb.name = "Laravel #{ENV['PROJECT_NAME']} Server"
    vb.customize ["modifyvm", :id, "--memory", "4096"]
    vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/vagrant", "1"]
  end
  
  config.vm.provision "shell", inline: $dependencies, :args => ["#{ENV['PROJECT_NAME']}"]  
  #config.vm.provision "shell", inline: $script, :args => ["#{ENV['PROJECT_NAME']}"] 

  # After starting and provisioning the vagrant machine, start a putty connection
  config.trigger.after :up do
      run_remote "sudo service apache2 start"
      run "'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe' http://127.0.0.1:8081"
      run "putty -X -ssh vagrant@127.0.0.1 -P 2222 -pw vagrant"
  end

end

###################  Install Dependencies #####################
$dependencies = <<SCRIPT

    sudo add-apt-repository ppa:ondrej/php
    sudo apt-get -qq update
    sudo apt-get upgrade -y

    sudo apt-get install -y htop apache2 php7.2 python-software-properties build-essential curl unzip git m4 ruby texinfo screen ranger nano 
    sudo apt-get install -y libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev zlib1g-dev libpng-dev libssl-dev
    sudo apt-get install -y php7.2-mysql php7.2-curl php7.2-json php7.2-cgi php7.2-fpm php7.2-mbstring php7.2-xml php7.2-common php7.2-pgsql php7.2-zip php7.2-dev php7.2-gd php7.2-intl php7.2-mysqlnd php7.2-gd php7.2-imap

    # Install Composer and Curl
    if ! hash composer 2>/dev/null; then
      
      sudo curl -s https://getcomposer.org/installer | php
      sudo mv composer.phar /usr/local/bin/composer

      if grep -q 'composer' "/home/vagrant/.bashrc"; then
          echo "Already added composer";
        else 
          echo "composer --version" >> /home/vagrant/.bashrc; 
      fi
      
      # verify composer version
      composer --version
    fi

    ## Install Archey
    if ! hash archey 2>/dev/null; then

        sudo apt-get install lsb-release scrot -y
        wget http://github.com/downloads/djmelik/archey/archey-0.2.8.deb  
        sudo dpkg -i archey-0.2.8.deb
        rm archey-0.2.8.deb

         if grep -q 'archey' "/home/vagrant/.bashrc"; then
          echo "Already added screen fetch";
        else 
          echo "archey" >> /home/vagrant/.bashrc; 
          echo 'ip -4 addr show eth1 | grep -oP "(?<=inet ).*(?=/)"' >> ~/.bashrc
        fi
    fi

    if ! hash mysql 2>/dev/null; then
      MYSQL_ROOT_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | sed 1q)
      MYSQL_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | sed 1q)

      echo "mysql root password: $MYSQL_ROOT_PASSWORD"

      # Install MySQL Server in a Non-Interactive mode. Default root password will be "root"
      echo "mysql-server mysql-server/root_password password $MYSQL_ROOT_PASSWORD" | sudo debconf-set-selections
      echo "mysql-server mysql-server/root_password_again password $MYSQL_ROOT_PASSWORD" | sudo debconf-set-selections
      
      sudo apt-get -y install mysql-server

      # Run the MySQL Secure Installation wizard
      ###mysql_secure_installation

sudo cat > /home/vagrant/.my.cnf << EOL 
[client]
user=root
password=$MYSQL_ROOT_PASSWORD
database=PWR
EOL

      sed -i 's/127\.0\.0\.1/0\.0\.0\.0/g' /etc/mysql/my.cnf
      #mysql -uroot -p -e 'USE mysql; UPDATE `user` SET `Host`="%" WHERE `User`="root" AND `Host`="localhost"; DELETE FROM `user` WHERE `Host` != "%" AND `User`="root"; FLUSH PRIVILEGES;'

      sudo service mysql restart
      mysql --password=$MYSQL_ROOT_PASSWORD --user=root -e "CREATE DATABASE PWR"

    fi

    sudo ln -s ~/PWR /var/www/html/PWR

    # Set up fpm
    sudo update-rc.d apache2 defaults


    # check status of fpm
    /etc/init.d/php7.2-fpm status

# write fpm config file.
cat << EOT >> /etc/php/7.2/fpm/pool.d/www-data.conf
[www]
user = vagrant
group = vagrant
listen = /var/run/php-fpm-www-data.sock
listen.owner = www
listen.group = www-data
listen.mode = 0666
pm = ondemand
pm.max_children = 5
pm.process_idle_timeout = 10s
pm.max_requests = 200
chdir = /
EOT

    cd /etc/apache2/sites-enabled/
    sudo a2dissite 000-default.conf

    # write fpm config file.
cat << EOT >> /etc/apache2/sites-available/pwr.conf
<VirtualHost *:80>
  ServerName PWR
  DocumentRoot "/home/vagrant/PWR/public"
  <Directory "/home/vagrant/PWR/public">
    AllowOverride all
  </Directory>
</VirtualHost>
EOT

    sudo ln -s ../sites-available/pwr.conf
    sudo a2ensite pwr.conf

    sudo a2enmod rewrite
    sudo a2enmod headers
    sudo a2enmod php7.2

    # restart php fpm
    /etc/init.d/php7.2-fpm restart



    # install chrome
    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
    echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list
    sudo apt-get update 
    sudo apt-get install google-chrome-stable -y 

    ## install node and npm
    cd PWR/
    sudo sh scripts/install_nodejs_npm.sh

    runuser -l vagrant -c "screen -dmS watch bash -c 'echo Starting NPM Watch; sudo /etc/init.d/apache2 restart; cd PWR; npm install --no-bin-links; sleep 5; npm run watch; exec bash'"

    if grep -q 'export DISPLAY=127.0.0.1:0.0;' "/home/vagrant/.bashrc"; then
        echo "Already add display";
      else 
        echo 'export DISPLAY=127.0.0.1:0.0;' >> "/home/vagrant/.bashrc";
    fi
    cd PWR;
    python scripts/pwr_sync.py 1953


SCRIPT
